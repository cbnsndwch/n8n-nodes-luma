name: Release to npm

on:
  push:
    tags: ['v*.*.*']

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
            
      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          pnpm install || { echo "‚ùå Dependency installation failed"; exit 1; }
          echo "‚úÖ Dependencies installed successfully"
        
      - name: Validate package with dry-run
        run: |
          echo "üîç Validating package structure with dry-run..."
          npm pack --dry-run || { echo "‚ùå Package validation failed"; exit 1; }
          echo "‚úÖ Package structure validated successfully"
        
      - name: Run comprehensive validation
        run: |
          echo "üîç Running comprehensive pre-publish validation..."
          pnpm run prepublishOnly || { echo "‚ùå Pre-publish validation failed"; exit 1; }
          echo "‚úÖ Pre-publish validation completed successfully"
        
      - name: Run tests
        run: |
          echo "üß™ Running test suite..."
          pnpm run test || { echo "‚ùå Test suite failed"; exit 1; }
          echo "‚úÖ All tests passed successfully"
        
      - name: Validate package contents
        run: |
          echo "üîç Validating final package contents..."
          # Check that dist/ directory exists and contains required files
          test -d dist || { echo "‚ùå Missing dist/ directory"; exit 1; }
          test -f dist/package.json || { echo "‚ùå Missing dist/package.json"; exit 1; }
          test -f dist/nodes/Luma/Luma.node.js || { echo "‚ùå Missing main node file"; exit 1; }
          test -f dist/credentials/LumaApi.credentials.js || { echo "‚ùå Missing credentials file"; exit 1; }
          
          # Verify package.json has correct name and version
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "üìã Package: $PACKAGE_NAME@$PACKAGE_VERSION"
          echo "‚úÖ Package contents validated successfully"
        
      - name: Validate npm authentication
        run: |
          echo "üîê Validating npm authentication..."
          if [ -z "$NODE_AUTH_TOKEN" ]; then
            echo "‚ùå NPM_TOKEN secret is not set. Please configure the NPM_TOKEN secret in repository settings."
            echo "üí° Go to: Repository Settings > Secrets and Variables > Actions > New repository secret"
            echo "üí° Name: NPM_TOKEN"
            echo "üí° Value: Your npm authentication token with publish permissions"
            exit 1
          fi
          
          # Test npm authentication by checking whoami
          npm whoami || {
            echo "‚ùå npm authentication failed. The NPM_TOKEN may be invalid or expired."
            echo "üí° Please verify your npm token has the following permissions:"
            echo "   - Read and write access to packages"
            echo "   - Automation scope (if available)"
            echo "üí° Generate a new token at: https://www.npmjs.com/settings/tokens"
            echo "üí° Then update the NPM_TOKEN secret in repository settings"
            exit 1
          }
          
          CURRENT_USER=$(npm whoami)
          echo "‚úÖ npm authentication successful as user: $CURRENT_USER"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
      - name: Publish to npm
        run: |
          echo "üöÄ Publishing package to npm..."
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          
          pnpm publish --access public || {
            echo "‚ùå npm publish failed for $PACKAGE_NAME@$PACKAGE_VERSION"
            echo "üí° Common causes and solutions:"
            echo "   - Version already exists: Check if this version is already published"
            echo "   - Authentication failed: Verify NPM_TOKEN secret is valid"
            echo "   - Permission denied: Ensure token has publish permissions for this package"
            echo "   - Network issues: Check npm registry connectivity"
            echo "üí° Manual verification commands:"
            echo "   npm view $PACKAGE_NAME versions --json  # Check existing versions"
            echo "   npm whoami                              # Verify authentication"
            echo "   npm access list packages                # Check package permissions"
            exit 1
          }
          echo "‚úÖ Package $PACKAGE_NAME@$PACKAGE_VERSION published successfully to npm"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Verify publication
        run: |
          echo "üîç Verifying package publication..."
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          
          # Wait a moment for npm registry to update
          sleep 10
          
          # Check if package is available on npm
          npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version || { echo "‚ö†Ô∏è Package not yet available on npm registry (may take a few minutes)"; exit 0; }
          echo "‚úÖ Package successfully published and available on npm registry"