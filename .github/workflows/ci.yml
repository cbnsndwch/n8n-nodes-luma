name: CI

on:
  pull_request:
    branches: 
      - '*'
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version:
          - 22.x
          - 24.x

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          package_json_file: ./package.json
          
      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Security Scan (Advisory Only)
        run: |
          echo "🔒 Running security scan (advisory only for CI)..."
          echo "🔍 Checking for security vulnerabilities..."
          
          # Run security audit but don't fail CI - just report
          pnpm audit --audit-level moderate || {
            echo "⚠️ Security vulnerabilities detected (will block release)"
            echo "🔍 Run 'pnpm run security:check' locally for details"
          }
          
          echo "📋 Running license compliance check..."
          pnpm run security:license || {
            echo "⚠️ License compliance issues detected (will block release)"
          }
          
          echo "ℹ️ Security scan completed (advisory mode)"
        
      - name: Validate TypeScript compilation
        run: |
          echo "🔍 Validating TypeScript compilation..."
          pnpm exec tsc --noEmit
          echo "✅ TypeScript compilation successful"
        
      - name: Build project
        run: |
          echo "🏗️ Building project..."
          pnpm run build
          echo "✅ Build process completed successfully"
        
      - name: Validate build artifacts
        run: |
          echo "🔍 Validating build artifacts..."
          
          # Core files
          test -f dist/nodes/Luma/Luma.node.js || { echo "❌ Missing dist/nodes/Luma/Luma.node.js"; exit 1; }
          test -f dist/nodes/LumaTrigger/LumaTrigger.node.js || { echo "❌ Missing dist/nodes/LumaTrigger/LumaTrigger.node.js"; exit 1; }
          test -f dist/credentials/LumaApi.credentials.js || { echo "❌ Missing dist/credentials/LumaApi.credentials.js"; exit 1; }
          
          # TypeScript declarations
          test -f dist/nodes/Luma/Luma.node.d.ts || { echo "❌ Missing TypeScript declarations"; exit 1; }
          test -f dist/nodes/LumaTrigger/LumaTrigger.node.d.ts || { echo "❌ Missing TypeScript declarations"; exit 1; }
          test -f dist/credentials/LumaApi.credentials.d.ts || { echo "❌ Missing TypeScript declarations"; exit 1; }
          
          # Icons and metadata
          test -f dist/nodes/Luma/luma.svg || { echo "❌ Missing icons"; exit 1; }
          test -f dist/nodes/LumaTrigger/luma.svg || { echo "❌ Missing icons"; exit 1; }
          test -f dist/package.json || { echo "❌ Missing package.json"; exit 1; }
          
          # Resource directories
          for dir in calendar event guest ticket user utility shared; do
            test -d "dist/nodes/Luma/$dir" || { echo "❌ Missing dist/nodes/Luma/$dir"; exit 1; }
          done
          
          echo "✅ All build artifacts validated successfully"
        
      - name: Lint code
        run: |
          echo "🔍 Running ESLint..."
          pnpm run lint
          echo "✅ Linting passed"
        
      - name: Format check
        run: |
          echo "🔍 Checking code formatting..."
          pnpm exec prettier nodes credentials tests --check
          echo "✅ Code formatting check passed"
        
      - name: Run test suite with coverage
        run: |
          echo "🧪 Running test suite..."
          pnpm run test:coverage
          echo "✅ All tests passed"
          
      - name: Upload coverage to Codecov
        if: matrix.node-version == '22.x'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false